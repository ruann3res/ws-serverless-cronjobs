# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ruanneres
service: ws-api

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  region: sa-east-1
  websocketsApiRouteSelectionExpression: $request.body.action
  stage: ${opt:stage, 'dev'}
  environment:
    CONNECTIONS_TABLE: !Ref ConnectionsTable
    API_GW_CONNECTION_URL: !Join ['',['https://',!Ref WebsocketsApi, '.execute-api.', '${self:provider.region}', '.amazonaws.com/',
    '${self:provider.stage}']]
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource: 
            - !GetAtt ConnectionsTable.Arn

package:
  individually: true

build: 
  esbuild:
    bundle: true
    minify: true
    exclude:
      - '@aws-sdk/*'

functions:
  wsConnection:
    handler: src/functions/wsConnection.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  wsSendMessage:
      handler: src/functions/wsSendMessage.handler
      events:
        - websocket:
            route: sendMessage  
  wsGarbageCollector:
      handler: src/functions/wsGarbageCollector.handler
      events: 
      - schedule:
          rate: rate(10 minutes)
  healthCheck:
    handler: src/functions/healthCheck.handler
    events:
      - httpApi:
          method: GET
          path: /healthcheck


resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: ConnectionsTable
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: connectionId
              AttributeType: S
          KeySchema:
            - AttributeName: connectionId
              KeyType: HASH